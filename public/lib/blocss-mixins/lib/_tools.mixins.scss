@charset "UTF-8";
/*! blocss-mixins v1.0.2 | MIT License | github.com/Blocss */

/*----------------------------------------------------------------------------*\
    TOOLS.MIXINS
    A set of usefull Sass mixins, wich can be used troughout your project
\*----------------------------------------------------------------------------*/

/*  Variables
\*----------------------------------------------------------------------------*/

$blocss-browser-context: $blocss-base-font-size !default;
$legacy-support-for-ie8: false !default;



/*  Functions
\*----------------------------------------------------------------------------*/

/**
 * Value to rem
 */
@function valueToRem($value) {
    @if type-of($value) == string or unitless($value) == true or unit($value) == "em" or unit($value) == "%" {
        @return $value;
    } @else {
        @return ($value/$blocss-browser-context*1rem);
    }
}


/**
 * Value to em
 */
@function valueToEm($value, $context: $blocss-browser-context) {
    @return ($value/$context*1em);
}


/**
 * A small, internally-used function to remove the units from a given value.
 */
@function strip-units($number) {
    @return $number / ($number * 0 + 1);
}



/*  Mixins
\*----------------------------------------------------------------------------*/

/**
 * Rem converter
 *
 * 1. Provide pixel fallback for ie8
 * 2. Loop over values
 *
 * Sample: @include rem(margin, 0 auto 300px, !important);
 */
@mixin rem ($property, $value, $append: "") {

    /* 1 */
    @if $legacy-support-for-ie8 == true {
        #{$property}: $value #{$append};
    }

    /* 2 */
    @if type-of($value) == list {
        $all: ();
        @for $i from 1 through length($value) {
            $all: append($all, valueToRem(nth($value, $i)));
        }
        #{$property}: $all #{$append};
    } @else {
        #{$property}: valueToRem($value) #{$append};
    }
}


/**
 * Calculates font, rem font size & line height
 * $multiplier: multiplies line height by the given value
 * $line-height: include line height or not
 * The line height parameter can also be used as the multiplier
 *
 * Sample usage @include font-size(18px, 2);
 */
@mixin font-size($fs, $line-height: true, $multiplier: 1) {
    @include rem(font-size, $fs);

    $use-line-height: false;

    @if type-of($line-height) == bool {
        @if $line-height == true{
            $use-line-height: true;
        }
    } @else if type-of($line-height) == number {
        $use-line-height: true;
        $multiplier: $line-height;
    }

    @if $use-line-height == true {
        line-height: (ceil($fs / $blocss-base-line-height) * ($blocss-base-line-height / $fs)) * $multiplier;
    }
}


/**
 * Truncate overly long strings
 * sample value truncate(100%)
 */
@mixin truncate($truncation-boundary) {
    @include rem(max-width, $truncation-boundary);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}


/**
 * Enclose a block of code with a media query as named in `$blocss-breakpoints`.
 */
@mixin media-query($media-query) {
    $breakpoint-found: false;

    @each $breakpoint in $blocss-breakpoints {
        @if type-of($breakpoint) == 'list' {
            $name: nth($breakpoint, 1);
            $declaration: nth($breakpoint, 2);

            @if $media-query == $name and $declaration {
                $breakpoint-found: true;

                @media only screen and #{$declaration} {
                    @content;
                }
            }
        } @else {
            @error "Breakpoint doesn’t match the `'key': '(value)'` format";
        }
    }

    @if $breakpoint-found == false {
        @warn "Breakpoint ‘#{$media-query}’ does not exist"
    }
}
